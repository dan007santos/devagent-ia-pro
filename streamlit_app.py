import streamlit as st
import replicate
import os

def gerar_codigo_inteligente(prompt, linguagem, nivel):
    """Gera c√≥digo funcional baseado no prompt do usu√°rio"""
    prompt_lower = prompt.lower()
    
    # Templates espec√≠ficos baseados no tipo de solicita√ß√£o
    if any(word in prompt_lower for word in ['calculadora', 'obra', 'constru√ß√£o', 'material']):
        if linguagem == "Python":
            return f'''# Calculadora para Obra - Gerada pelo DevAgent IA Pro
# Prompt: {prompt}

import math

class CalculadoraObra:
    def __init__(self):
        self.materiais = {{
            "cimento": {{"unidade": "saco 50kg", "preco": 32.50}},
            "areia": {{"unidade": "m¬≥", "preco": 45.00}},
            "brita": {{"unidade": "m¬≥", "preco": 55.00}},
            "tijolo": {{"unidade": "milheiro", "preco": 650.00}},
            "ferro": {{"unidade": "kg", "preco": 7.80}},
            "ceramica": {{"unidade": "m¬≤", "preco": 35.00}}
        }}
    
    def calcular_concreto(self, volume_m3):
        """Calcula materiais para concreto"""
        # Tra√ßo 1:2:3 (cimento:areia:brita)
        cimento_sacos = math.ceil(volume_m3 * 7)  # 7 sacos por m¬≥
        areia_m3 = volume_m3 * 0.5
        brita_m3 = volume_m3 * 0.8
        
        custo_total = (
            cimento_sacos * self.materiais["cimento"]["preco"] +
            areia_m3 * self.materiais["areia"]["preco"] +
            brita_m3 * self.materiais["brita"]["preco"]
        )
        
        return {{
            "volume": volume_m3,
            "cimento": {{"qtd": cimento_sacos, "unidade": "sacos"}},
            "areia": {{"qtd": areia_m3, "unidade": "m¬≥"}},
            "brita": {{"qtd": brita_m3, "unidade": "m¬≥"}},
            "custo_total": custo_total
        }}
    
    def calcular_alvenaria(self, area_m2):
        """Calcula materiais para alvenaria"""
        tijolos_milheiro = math.ceil(area_m2 * 0.08)  # 80 tijolos por m¬≤
        cimento_sacos = math.ceil(area_m2 * 0.3)  # 0.3 sacos por m¬≤
        areia_m3 = area_m2 * 0.05
        
        custo_total = (
            tijolos_milheiro * self.materiais["tijolo"]["preco"] +
            cimento_sacos * self.materiais["cimento"]["preco"] +
            areia_m3 * self.materiais["areia"]["preco"]
        )
        
        return {{
            "area": area_m2,
            "tijolos": {{"qtd": tijolos_milheiro, "unidade": "milheiro"}},
            "cimento": {{"qtd": cimento_sacos, "unidade": "sacos"}},
            "areia": {{"qtd": areia_m3, "unidade": "m¬≥"}},
            "custo_total": custo_total
        }}

def main():
    print("üèóÔ∏è CALCULADORA PARA OBRA")
    print("=" * 40)
    
    calc = CalculadoraObra()
    
    while True:
        print("\\nüìã MENU:")
        print("1 - Calcular Concreto")
        print("2 - Calcular Alvenaria") 
        print("3 - Lista de Pre√ßos")
        print("0 - Sair")
        
        opcao = input("\\nEscolha uma op√ß√£o: ").strip()
        
        if opcao == "1":
            try:
                volume = float(input("Digite o volume em m¬≥: "))
                resultado = calc.calcular_concreto(volume)
                
                print(f"\\nüèóÔ∏è OR√áAMENTO CONCRETO - {{resultado['volume']}}m¬≥")
                print(f"Cimento: {{resultado['cimento']['qtd']}} sacos")
                print(f"Areia: {{resultado['areia']['qtd']:.2f}} m¬≥")
                print(f"Brita: {{resultado['brita']['qtd']:.2f}} m¬≥")
                print(f"üí∞ TOTAL: R$ {{resultado['custo_total']:.2f}}")
                
            except ValueError:
                print("‚ùå Digite um n√∫mero v√°lido!")
                
        elif opcao == "2":
            try:
                area = float(input("Digite a √°rea em m¬≤: "))
                resultado = calc.calcular_alvenaria(area)
                
                print(f"\\nüß± OR√áAMENTO ALVENARIA - {{resultado['area']}}m¬≤")
                print(f"Tijolos: {{resultado['tijolos']['qtd']}} milheiro")
                print(f"Cimento: {{resultado['cimento']['qtd']}} sacos")
                print(f"Areia: {{resultado['areia']['qtd']:.2f}} m¬≥")
                print(f"üí∞ TOTAL: R$ {{resultado['custo_total']:.2f}}")
                
            except ValueError:
                print("‚ùå Digite um n√∫mero v√°lido!")
                
        elif opcao == "3":
            print("\\nüí∞ TABELA DE PRE√áOS:")
            for material, dados in calc.materiais.items():
                print(f"{{material.capitalize()}}: R$ {{dados['preco']:.2f}} por {{dados['unidade']}}")
                
        elif opcao == "0":
            print("üëã Obrigado por usar a Calculadora de Obra!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

if __name__ == "__main__":
    main()'''
    
    # Templates para outros tipos de c√≥digo
    elif any(word in prompt_lower for word in ['fun√ß√£o', 'function', 'calcular', 'fatorial']):
        return f'''# Fun√ß√£o solicitada: {prompt}

def calcular_resultado(numero):
    """
    Fun√ß√£o gerada baseada no prompt: {prompt}
    N√≠vel: {nivel}
    """
    if "fatorial" in "{prompt_lower}":
        if numero < 0:
            return "Erro: Fatorial n√£o definido para n√∫meros negativos"
        resultado = 1
        for i in range(1, numero + 1):
            resultado *= i
        return resultado
    else:
        # Implementa√ß√£o gen√©rica
        return numero * 2  # Exemplo: dobrar o n√∫mero

# Teste da fun√ß√£o
if __name__ == "__main__":
    print("Testando fun√ß√£o...")
    teste = calcular_resultado(5)
    print(f"Resultado: {{teste}}")'''
    
    else:
        # Template gen√©rico mais √∫til
        return f'''# C√≥digo gerado para: {prompt}
# Linguagem: {linguagem} | N√≠vel: {nivel}

class Aplicacao:
    def __init__(self):
        self.nome = "{prompt}"
        print(f"üöÄ Inicializando: {{self.nome}}")
    
    def executar(self):
        """M√©todo principal da aplica√ß√£o"""
        print("‚öôÔ∏è Executando funcionalidade...")
        # TODO: Implementar l√≥gica espec√≠fica para: {prompt}
        return "Funcionalidade implementada com sucesso!"
    
    def mostrar_info(self):
        """Exibe informa√ß√µes da aplica√ß√£o"""
        print(f"üì± Aplica√ß√£o: {{self.nome}}")
        print(f"üîß N√≠vel: {nivel}")
        print(f"üêç Linguagem: {linguagem}")

def main():
    app = Aplicacao()
    resultado = app.executar()
    app.mostrar_info()
    print(f"‚úÖ {{resultado}}")

if __name__ == "__main__":
    main()'''

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="DevAgent IA Pro", layout="centered", page_icon="ü§ñ")
st.title("ü§ñ DevAgent IA Pro")
st.subheader("Escreva o que voc√™ quer e eu gero o c√≥digo!")

# Configurar API do Replicate
try:
    # For√ßar carregamento do token do secrets.toml
    if hasattr(st, 'secrets') and 'REPLICATE_API_TOKEN' in st.secrets:
        replicate_token = st.secrets["REPLICATE_API_TOKEN"]
        os.environ["REPLICATE_API_TOKEN"] = replicate_token
    elif os.getenv("REPLICATE_API_TOKEN"):
        replicate_token = os.getenv("REPLICATE_API_TOKEN")
        os.environ["REPLICATE_API_TOKEN"] = replicate_token
    else:
        replicate_token = "placeholder"
        os.environ["REPLICATE_API_TOKEN"] = "placeholder"
except Exception as e:
    replicate_token = "placeholder"
    os.environ["REPLICATE_API_TOKEN"] = "placeholder"

# Verificar se API est√° configurada - verifica√ß√£o mais robusta
api_configured = (
    replicate_token and 
    replicate_token != "placeholder" and 
    replicate_token != "sua-api-key-do-replicate" and
    replicate_token != "sua-chave-aqui" and
    len(replicate_token) > 10 and
    replicate_token.startswith("r8_")
)

if not api_configured:
    st.warning("‚ö†Ô∏è **API do Replicate n√£o configurada!** Configure sua chave no arquivo `.streamlit/secrets.toml` para usar a gera√ß√£o de c√≥digo com IA.")
    st.code('REPLICATE_API_TOKEN = "sua-chave-aqui"', language="toml")
    st.markdown("---")

# Configura√ß√µes de gera√ß√£o (movidas para cima para evitar erro de vari√°vel n√£o definida)
col1, col2 = st.columns(2)
with col1:
    linguagem = st.selectbox(
        "üî§ Linguagem de Programa√ß√£o:",
        ["Python", "JavaScript", "Java", "C++", "Go", "Rust"],
        index=0
    )
with col2:
    nivel = st.select_slider(
        "üìä N√≠vel de Complexidade:",
        ["B√°sico", "Intermedi√°rio", "Avan√ßado"],
        value="Intermedi√°rio"
    )

# Campo de entrada
prompt_usuario = st.text_area("Descreva o que voc√™ quer criar:", 
                             placeholder="Ex: Criar uma fun√ß√£o Python que calcule fatorial de um n√∫mero",
                             height=150)

# Bot√£o para gerar c√≥digo
if st.button("üöÄ Gerar C√≥digo", use_container_width=True):
    if prompt_usuario:
        with st.spinner("Gerando c√≥digo com IA..."):
            if api_configured:
                try:
                    # Usar Replicate para gerar c√≥digo real
                    prompt_completo = f"Gere c√≥digo {linguagem.lower()} de n√≠vel {nivel.lower()} para: {prompt_usuario}. Responda apenas com o c√≥digo, sem explica√ß√µes."
                    
                    output = replicate.run(
                        "meta/llama-2-70b-chat:02e509c789964a7ea8736978a43525956ef40397be9033abf9fd2badfe68c9e3",
                        input={
                            "prompt": prompt_completo,
                            "max_new_tokens": 500,
                            "temperature": 0.1
                        }
                    )
                    codigo_gerado = "".join(output)
                    
                    # Detectar linguagem para syntax highlighting
                    lang_map = {
                        "Python": "python",
                        "JavaScript": "javascript", 
                        "Java": "java",
                        "C++": "cpp",
                        "Go": "go",
                        "Rust": "rust"
                    }
                    
                    st.code(codigo_gerado, language=lang_map.get(linguagem, "python"))
                    st.success(f"‚úÖ C√≥digo {linguagem} gerado com sucesso!")
                    
                except Exception as e:
                    st.error(f"‚ùå Erro ao gerar c√≥digo: {str(e)}")
                    # Fallback para c√≥digo simulado inteligente
                    codigo_simulado = gerar_codigo_inteligente(prompt_usuario, linguagem, nivel)
                    
                    lang_map = {
                        "Python": "python",
                        "JavaScript": "javascript", 
                        "Java": "java",
                        "C++": "cpp",
                        "Go": "go",
                        "Rust": "rust"
                    }
                    
                    st.code(codigo_simulado, language=lang_map.get(linguagem, "python"))
                    st.info("‚ö†Ô∏è C√≥digo simulado (erro na API) - Mas funcional!")
            else:
                # Modo simula√ß√£o quando API n√£o est√° configurada - usando gerador inteligente
                codigo_simulado = gerar_codigo_inteligente(prompt_usuario, linguagem, nivel)
    
                lang_map = {
                    "Python": "python",
                    "JavaScript": "javascript", 
                    "Java": "java",
                    "C++": "cpp",
                    "Go": "go",
                    "Rust": "rust"
                }
                
                st.code(codigo_simulado, language=lang_map.get(linguagem, "python"))
                st.info("‚ÑπÔ∏è C√≥digo simulado - Configure a API do Replicate para gerar c√≥digo real!")
    else:
        st.warning("‚ö†Ô∏è Por favor, descreva o que voc√™ quer criar.")

# Se√ß√£o de outras funcionalidades
st.markdown("---")
st.subheader("üöÄ Outras Funcionalidades do DevAgent IA Pro")

col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("""
    **ü§ñ Bot Telegram**
    - Cria√ß√£o autom√°tica
    - Bot√µes interativos
    - Integra√ß√£o com IA
    """)
    if st.button("üîß Criar Bot", key="telegram"):
        st.info("üöß Em desenvolvimento - Use o c√≥digo gerado acima para criar bots!")

with col2:
    st.markdown("""
    **üìà Trading**
    - Binance, Bybit, KuCoin
    - Trading automatizado
    - An√°lise t√©cnica
    """)
    if st.button("üìä Conectar", key="trading"):
        st.info("üöß Configure suas APIs de trading no arquivo de configura√ß√£o!")

with col3:
    st.markdown("""
    **üé® Gera√ß√£o de Imagens**
    - Stable Diffusion
    - M√∫ltiplos estilos
    - Alta qualidade
    """)
    if st.button("üñºÔ∏è Gerar Imagem", key="images"):
        st.info("üöß Funcionalidade de imagens ser√° implementada em breve!")

# Sidebar com funcionalidades extras
with st.sidebar:
    st.header("üõ†Ô∏è Funcionalidades")
    
    st.subheader("üìä Estat√≠sticas")
    st.metric("C√≥digos Gerados", "42", "‚ÜóÔ∏è 12%")
    st.metric("Usu√°rios Ativos", "156", "‚ÜóÔ∏è 8%")
    
    st.subheader("üîß Configura√ß√µes Avan√ßadas")
    st.info("üí° As configura√ß√µes de linguagem e n√≠vel foram movidas para cima na p√°gina principal.")
    
    st.subheader("‚ÑπÔ∏è Sobre")
    st.markdown("""
    **DevAgent IA Pro** √© um agente aut√¥nomo que:
    - ü§ñ Gera c√≥digo em qualquer linguagem
    - üì± Cria bots do Telegram 
    - üìà Conecta com corretoras
    - üé® Gera imagens com IA
    - üé• Faz upload no YouTube
    """)

# Campo para feedback
st.markdown("---")
st.subheader("üí¨ Feedback")
feedback = st.text_area("Envie seu feedback (opcional):", 
                       placeholder="Como podemos melhorar o DevAgent IA Pro?",
                       height=100)

col1, col2 = st.columns([1, 1])
with col1:
    if st.button("üì§ Enviar Feedback", use_container_width=True):
        if feedback:
            st.success("‚úÖ Feedback enviado! Obrigado pela contribui√ß√£o.")
        else:
            st.info("üí≠ Escreva um feedback para enviar.")

with col2:
    if st.button("‚≠ê Avaliar App", use_container_width=True):
        st.balloons()
        st.success("‚≠ê Obrigado pela avalia√ß√£o!")
